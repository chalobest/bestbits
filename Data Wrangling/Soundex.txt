The code for soundex method is as follows (written in postgreSQL):

------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION soundex(input text) RETURNS text
IMMUTABLE STRICT COST 500 LANGUAGE plpgsql
AS $$
DECLARE
  soundex text = '';
  char text;
  symbol text;
  last_symbol text = '';
  pos int = 1;
BEGIN
  WHILE length(soundex) < 4 LOOP
    char = upper(substr(input, pos, 1));
    pos = pos + 1;
    CASE char
    WHEN '' THEN
      -- End of input string
      IF soundex = '' THEN
        RETURN '';
      ELSE
        RETURN rpad(soundex, 4, '0');
      END IF;
    WHEN 'B', 'F', 'P', 'V' THEN
      symbol = '1';
    WHEN 'C', 'G', 'J', 'K', 'Q', 'S', 'X', 'Z' THEN
      symbol = '2';
    WHEN 'D', 'T' THEN
      symbol = '3';
    WHEN 'L' THEN
      symbol = '4';
    WHEN 'M', 'N' THEN
      symbol = '5';
    WHEN 'R' THEN
      symbol = '6';
 
//The code for incorporating the numbers was included as follows:  
    WHEN '1' THEN
      symbol = '!';
    WHEN '2' THEN
      symbol = '@';
    WHEN '3' THEN
      symbol = '#';
    WHEN '4' THEN
      symbol = '$';
    WHEN '5' THEN
      symbol = '%';
    WHEN '6' THEN
      symbol = '^';
    WHEN '7' THEN
      symbol = '&';
    WHEN '8' THEN
      symbol = '*';
    WHEN '9' THEN
      symbol = '`';
    WHEN '0' THEN
      symbol = '~';
    	
    ELSE
      -- Not a consonant; no output, but next similar consonant will be re-recorded
      symbol = '';
    END CASE;
 
    IF soundex = '' THEN
      -- First character; only accept strictly English ASCII characters
      IF char ~>=~ 'A' AND char ~<=~ 'Z' OR char ~>=~ '0' AND char ~<=~ '9' THEN
        soundex = char;
        last_symbol = symbol;
      END IF;
    ELSIF last_symbol != symbol THEN
      soundex = soundex || symbol;
      last_symbol = symbol;
    END IF;
  END LOOP;
 
  RETURN soundex;
END;
$$;
